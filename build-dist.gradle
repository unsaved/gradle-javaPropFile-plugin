/**
 * This file is an ugly hack.
 * Many non-shared properties are required to publish a release to Maven, and I
 * do not like forcing my developers to put very project-specific data under
 * their home directory ($HOME/.gradle/gradle.properties... I wouldn't ever
 * consider adding it under a Gradle system installation directory).
 * Besides, since Gradle has mandated the single supported file name exactly,
 * it is impossible to make it clear that we are using it for non-shared
 * usage.
 * Therefore, this file uses the output jar of the main 'build.gradle' file
 * to load 'local.properties'.
 * Due to Gradle initialization problems that burn up hours and hours of my
 * life, the 'gradle-javaPropFile-plugin-*.jar' file must be written by
 * 'build.gradle' before this 'build-dist.gradle' file executes...  but there
 * are required interdependencies between the files because 'build-dist.gradle'
 * needs to publish artifacts generated by 'build.gradle'...   Arrrrrrrrrrrg.
 * So, although I am entirely dissatisfied with it, you must build the jar
 * file first with 'build.gradle', then use this build file afterwards to
 * publish to a Maven repository.
 */

assert ext.cpFileTree.files.size() > 0:
    '''Due to boot-strapping issue, you must build the jar with 'build.gradle'
before you can use build file 'build-dist.gradle'.
'''
assert ext.cpFileTree.files.size() < 2:
    '''Due to boot-strapping issue, you must have just one project jar before
you can use build file 'build-dist.gradle'.  Please run 'gradlew clean jar'.
'''
buildscript {
    ext.cpFileTree = fileTree(
            dir: 'build/libs',
            excludes: ['*-sources.jar', '*-javadoc.jar'],
            include: 'gradle-javaPropFile-plugin-*.jar'
    )
    dependencies { classpath ext.cpFileTree }
}

apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'javaPropFile'

signing {
    sign configurations.archives
}

apply from: 'build.gradle'
defaultTasks 'uploadArchives'

artifacts {
     archives sourcesJar
     archives javadocJar
}

configurations { deployJars }

propFileLoader.typeCasting=true
propFileLoader.traditionalPropertiesInit()

if (project.hasProperty('mavenRepository.dest.url')) {
    def url = project.property('mavenRepository.dest.url')
    assert url != null:
        '''Property 'mavenRepository.dest.url' may not be null
'''
    assert url instanceof URL:
        ('''Property 'mavenRepository.dest.url' must be of type URL.  Is a '''
                + url.class.name + '\n')
    if (url.protocol == 'scp') {
        repositories { mavenCentral() }
        dependencies {
            deployJars 'org.apache.maven.wagon:wagon-ssh:latest.milestone'
        }
    }
}

uploadArchives {
    def authMap = [:]
    if (project.hasProperty('mavenRepository.dest.username'))
        authMap['userName'] = project.property('mavenRepository.dest.username')
    if (project.hasProperty('mavenRepository.dest.password'))
        authMap['password'] = project.property('mavenRepository.dest.password')
    if (project.hasProperty('mavenRepository.dest.privateKey'))
        authMap['privateKey'] =
                project.property('mavenRepository.dest.privateKey')

    repositories.mavenDeployer {
        configuration = configurations.deployJars
        beforeDeployment {
            MavenDeployment deployment -> signing.signPom(deployment)
        }
        if (project.hasProperty('mavenRepository.dest.url'))
            repository(url: project.property('mavenRepository.dest.url')) {
                authentication(authMap)
            }
        pom.project {
            // The hasProperty tests are necessary even for required variables
            // because this code is evaluated even if the uploadArchives task
            // will never be executed.
            if (project.hasProperty('title')) name project.property('title')
            if (project.hasProperty('description'))
                description project.property('description')
            if (project.hasProperty('url')) url project.property('url')
            if (project.hasProperty('inceptionYear'))
                inceptionYear project.property('inceptionYear')
            scm {
                if (project.hasProperty('scm.url'))
                    url project.property('scm.url')
                if (project.hasProperty('scm.connection'))
                    connection project.property('scm.connection')
                if (project.hasProperty('scm.tag'))
                    tag project.property('scm.tag')
            }
            if (project.hasProperty('org.name')
                    || project.hasProperty('org.url')) organization {
                if (project.hasProperty('org.name'))
                    name project.property('org.name')
                if (project.hasProperty('org.url'))
                    url project.property('org.url')
            }
            licenses {
                license {
                    name 'Apache 2.0'
                    url 'https://raw.github.com/unsaved/gradle-javaPropFile-plugin/master/doc/LICENSE.txt'
                    distribution 'repo'
                }
            }
            if (project.hasProperty('developer.name')
                    || project.hasProperty('developer.email')) developers {
                developer {
                    if (project.hasProperty('developer.id'))
                        id project.property('developer.id')
                    if (project.hasProperty('developer.name'))
                        name project.property('developer.name')
                    if (project.hasProperty('developer.email'))
                        email project.property('developer.email')
                }
            }
        }
    }
}

uploadArchives { doFirst {
    ['title', 'group', 'mavenRepository.dest.url', 'scm.connection',
            'scm.url', 'url', 'inceptionYear', 'description'].each {
        assert (project.hasProperty(it) && project.property(it) != null
                && project.property(it) != '') :
            """Property '$it' is required by 'uploadArchives' task.
"""
    }
    ['mavenRepository.dest.url', 'scm.url', 'url', 'org.url'].each {
        assert project.property(it) != null:
            """Property '$it' may not be null
"""
        assert (!project.hasProperty(it)
                || project.property(it) instanceof URL):
            ("""Property '$it' must be of type URL.  Is a """
                    + project.property(it).class.name + '\n')
    }
} }
