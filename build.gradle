defaultTasks 'jar'

apply plugin: 'groovy'
test.testLogging.showStandardStreams = true

def localGradleFile = file('local.gradle')
if (localGradleFile.isFile()) {
    logger.info('''Executing optional build file 'localGradleFile'.''')
    apply from: localGradleFile
}

if (version == 'unspecified') version = '0.6.1-SNAPSHOT'
if (!project.hasProperty('org.name'))
    project.ext.set('org.name', ((group == 'com.admc')
            ? 'Axis Data Management Corp.' : System.properties['user.name']))
if (!project.hasProperty('jar.title'))
    project.ext.set('jar.title', (group == 'com.admc')
            ? 'JavaPropFile Gradle plugin jar' : 'Customization')

dependencies {
    compile gradleApi()
    groovy localGroovy()
}

// Today this has no effect since current Groovy compiler can't do later than 1.5.
compileGroovy.targetCompatibility = '1.5'

task noop << { }
noop.description = 'Noop task for Gradle testing'

jar { doFirst {
    project.metaInf << files('doc/LICENSE.txt')
    exclude '**/.*/**'
    jar { manifest { attributes(
        'Specification-Title': 'JavaPropFile Gradle Plugin',
        'Specification-Version': '0.6.1-SNAPSHOT',
        'Specification-Vendor': 'Axis Data Management Corp.',
        'Implementation-Title': project.property('jar.title'),
        'Implementation-Version': project.version,
        'Implementation-Vendor': project.property('org.name')
    ) } }
} }

// This task only for SCM administrator.  Update version and execute this task.
task updateWrapper(type: Wrapper) { doFirst {
    assert project.hasProperty('newVersion') :
        '''Property 'newVersion' is required for task 'updateWrapper'.'''
    assert project.newVersion == gradle.gradleVersion :
        "You invoked Gradle system with version $gradle.gradleVersion instead of desired version $project.newVersion"
} }
updateWrapper << {
    gradleVersion = project['newVersion']
    println 'WARNING:  Merge our customizations into the newly-generated wrapper scripts'
}
updateWrapper.description = 'Update Gradle version.  For SCM Administrators.'

task checkTabs << {
    FileTree tree = fileTree(dir: '..')
    tree.exclude '**/.*/**'
    tree.include  '*.*'
    tree.include  'doc/*'
    tree.include  'src/**'
    def tabFiles = []
    tree.each { if (it.text.indexOf('\t') > -1) tabFiles << relativePath(it) }
    if (tabFiles.size() > 0) println '  ' + tabFiles.join('\n  ')
}
checkTabs.description = 'Reports on any text files containing tab characters'

task sourcesJar(type: Jar, dependsOn:classes) {
    exclude '**/.*/**'
    classifier = 'sources'
    from sourceSets.main.allSource
}
sourcesJar.description = 'Build sources jar file'

task javadocJar(type: Jar, dependsOn:javadoc) {
    exclude '**/.*/**'
    classifier = 'javadoc'
    from javadoc.destinationDir
}
javadocJar.description = 'Build javadoc jar file'

test { systemProperties 'RETAIN_WORK': 'true' }
